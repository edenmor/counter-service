trigger:
- main

stages:
  - stage: Build
    displayName: Build Image
    jobs:
      - job: Build
        displayName: Build
        pool:
          name: default
          vmImage: ado-linuxagent
        steps:
          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              command: 'build'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(Build.BuildId)
              repository: 'edenmor1989/counter-service'

  - stage: Test
    displayName: Run Tests
    jobs:
      - job: Test
        displayName: Test
        pool:
          name: default
          vmImage: ado-linuxagent
        steps:
          - script: |
              pytest 
            displayName: Run Pytest
            
          - script: |
              docker run -d --name test-counter-service -p 8080:80 edenmor1989/counter-service:$(Build.BuildId)
              sleep 1
            displayName: Start Docker Container
          - script: |
              container_status=$(docker inspect --format='{{.State.Health.Status}}' test-counter-service)
              if [ "$container_status" != "healthy" ]; then
                echo "Container health check failed"
                exit 1
              fi
            displayName: Check Container Health
          - script: |
              docker stop test-counter-service
              docker rm test-counter-service
            displayName: Cleanup Test Container

  - stage: Deploy
    displayName: Deploy to Production
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: 'production'
        pool:
          name: default
          vmImage: ado-linuxagent
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Docker@2
                  displayName: Build and Push Docker Image
                  inputs:
                    containerRegistry: 'dockerhub_registry'
                    repository: 'edenmor1989/counter-service'
                    command: 'push'
                    Dockerfile: '**/Dockerfile'
                    tags: |
                      $(Build.BuildId)

                - script: echo Deploying to production...
                  displayName: 'Echo Deploy Start'

                - task: SSH@0
                  displayName: 'Deploy to Production Server'
                  inputs:
                    sshEndpoint: 'ssh_prod_server'
                    runOptions: 'commands'
                    commands: |
                      docker pull edenmor1989/counter-service:$(Build.BuildId)
                      docker stop counter-service || true 
                      docker rm counter-service || true
                      docker run -d --restart unless-stopped --name counter-service -p 80:80 edenmor1989/counter-service:$(Build.BuildId)
